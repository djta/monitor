(function (c, h) {
    var u = c.document; var b = u.documentElement;
    var o = u.querySelector('meta[name="viewport"]');
    var p = u.querySelector('meta[name="flexible"]');
    var a = 0; var t = 0; var n; var d = h.flexible || (h.flexible = {});
    if (o) {
        console.warn("将根据已有的meta标签来设置缩放比例");
        var g = o.getAttribute("content").match(/initial\-scale=([\d\.]+)/); if (g) {
            t = parseFloat(g[1]); a = parseInt(1 / t)
        }
    } else {
        if (p) {
            var l = p.getAttribute("content"); if (l) {
                var s = l.match(/initial\-dpr=([\d\.]+)/);
                var j = l.match(/maximum\-dpr=([\d\.]+)/); if (s) {
                    a = parseFloat(s[1]);
                    t = parseFloat((1 / a).toFixed(2))
                } if (j) {
                    a = parseFloat(j[1]);
                    t = parseFloat((1 / a).toFixed(2))
                }
            }
        }
    }
    if (!a && !t) {
        var r = c.navigator.appVersion.match(/android/gi);
        var q = c.navigator.appVersion.match(/iphone/gi);
        var m = c.devicePixelRatio;
        if (q) {
            if (m >= 3 && (!a || a >= 3)) { a = 3 }
            else {
                if (m >= 2 && (!a || a >= 2)) { a = 2 }
                else { a = 1 }
            }
        }
        else { a = 1 } t = 1 / a
    } b.setAttribute("data-dpr", a);
    if (!o) {
        o = u.createElement("meta");
        o.setAttribute("name", "viewport");
        o.setAttribute(
            "content",
            "initial-scale=" + t +
            ",viewport-fit=" + (window.viewportFit || "cover") +
            ", maximum-scale=" + t + ", minimum-scale="
            + t + ", user-scalable=no");
        if (b.firstElementChild) {
            b.firstElementChild.appendChild(o)
        }
        else {
            var i = u.createElement("div");
            i.appendChild(o); u.write(i.innerHTML)
        }
    }
    function k() {
        var v = b.getBoundingClientRect().width;
        if (v / a > 540) { v = 540 * a }
        var w = v / 10;
        b.style.fontSize = w + "px"; d.rem = c.rem = w
    }
    c.addEventListener("resize",
        function () {
            clearTimeout(n);
            n = setTimeout(k, 300)
        }, false);
    c.addEventListener("pageshow",
        function (v) {
            if (v.persisted) {
                clearTimeout(n);
                n = setTimeout(k, 300)
            }
        }, false);
    if (u.readyState === "complete") { u.body.style.fontSize = 12 * a + "px" }
    else {
        u.addEventListener("DOMContentLoaded",
            function (v) { u.body.style.fontSize = 12 * a + "px" },
            false)
    } k(); d.dpr = c.dpr = a; d.refreshRem = k;
    d.rem2px = function (w) {
        var v = parseFloat(w) * this.rem;
        if (typeof w === "string" && w.match(/rem$/)) { v += "px" } return v
    };
    d.px2rem = function (w) {
        var v = parseFloat(w) / this.rem;
        if (typeof w === "string" && w.match(/px$/)) { v += "rem" } return v
    };
    d.changeFontSize = function (z, A) {
        var v = z.clientWidth,
        B = document.documentElement.clientWidth;
        var w = document.documentElement, x = w.style,
            y = parseFloat(x.fontSize);
        if (v != Math.round(B * A / 10)) { x.fontSize = (y * Math.round(B * A / 10) / v) + "px" }
    };
    function f() {
        var w = window.document.documentElement;
        var x = parseFloat(w.style.fontSize);
        var v = parseFloat(parseFloat(w.style.fontSize));
        if (v === x) { return } w.style.fontSize = x + (x - v) + "px"
    }
    if (typeof window.onload === "function") {
        var e = window.onload; window.onload =
            function () { e(); f() }
    }
    else { window.onload = f }
})(window, window["lib"] || (window["lib"] = {}));